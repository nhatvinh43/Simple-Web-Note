{"version":3,"sources":["NoteForm.js","NoteItem.js","NoteList.js","App.js","serviceWorker.js","index.js"],"names":["NoteForm","props","state","title","content","className","action","placeholder","onChange","this","titleChangeHandler","rows","contentChangeHandler","type","value","onClick","submitHandler","React","Component","NoteItem","date","NoteList","notes","map","item","noteDate","App","bind","handleTitleChange","handleContentChange","axios","get","then","result","setState","data","catch","e","alert","event","target","preventDefault","newNotes","newItem","Date","length","pop","splice","post","response","console","log","err","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.ebfb493c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./css/bootstrap.css\";\r\nimport \"./App.css\";\r\n\r\nclass NoteForm extends React.Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      title: \"\",\r\n      content: \"\",\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"form input py-5 \" action=\"#\">\r\n        <input\r\n          className=\" text-center mb-3 form-control col-10 py-3\"\r\n          placeholder=\"Title\"\r\n          onChange={this.props.titleChangeHandler}\r\n        />\r\n\r\n        <textarea\r\n          rows=\"7\"\r\n          className=\"my-5 text-center form-control col-10\"\r\n          onChange={this.props.contentChangeHandler}\r\n          placeholder=\"Content\"\r\n        />\r\n        <input\r\n          className=\"mt-3 form-control btn-info col-3\"\r\n          type=\"submit\"\r\n          value=\"Save note\"\r\n          onClick={this.props.submitHandler}\r\n        />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NoteForm;\r\n","import React from \"react\";\r\nimport \"./css/bootstrap.css\";\r\nimport \"./App.css\";\r\n\r\nclass NoteItem extends React.Component {\r\n  constructor(props) {\r\n    super();\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"card my-3 mx-auto\">\r\n        <div className=\"card-header\">{this.props.date}</div>\r\n        <div className=\"card-body\">\r\n          <h5 className=\"card-title\">{this.props.title}</h5>\r\n          <p className=\"card-text\">{this.props.content}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NoteItem;\r\n","import React from \"react\";\r\nimport NoteItem from \"./NoteItem\";\r\nimport \"./css/bootstrap.css\";\r\nimport \"./App.css\";\r\n\r\nvar noteList = \"\";\r\nclass NoteList extends React.Component {\r\n  constructor(props) {\r\n    super();\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"card-columns\">\r\n        {\r\n          (noteList = this.props.notes.map((item) => {\r\n            return (\r\n              <NoteItem\r\n                title={item.title}\r\n                content={item.content}\r\n                date={item.noteDate}\r\n              />\r\n            );\r\n          }))\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NoteList;\r\n","import React from \"react\";\nimport NoteForm from \"./NoteForm\";\nimport NoteList from \"./NoteList\";\nimport axios from \"axios\";\nimport \"./css/bootstrap.css\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.submitHandler = this.submitHandler.bind(this);\n    this.handleTitleChange = this.handleTitleChange.bind(this);\n    this.handleContentChange = this.handleContentChange.bind(this);\n    this.state = {\n      notes: [],\n      title: \"\",\n      content: \"\",\n    };\n  }\n\n  componentDidMount() {\n    axios\n      .get(\"http://localhost:8888/getNote\")\n      .then((result) => {\n        this.setState({ notes: result.data });\n      })\n      .catch((e) => {\n        alert(e);\n      });\n  }\n\n  handleTitleChange(event) {\n    this.setState({ title: event.target.value });\n  }\n\n  handleContentChange(event) {\n    this.setState({ content: event.target.value });\n  }\n\n  submitHandler(event) {\n    event.preventDefault();\n\n    let newNotes = this.state.notes;\n    let date = new Date();\n    let newItem = {\n      title: this.state.title,\n      content: this.state.content,\n      noteDate: \"recently added\",\n    };\n\n    if (newItem.title === \"\") {\n      alert(\"Title cannot be blank!\");\n      return;\n    }\n\n    if (newNotes.length >= 9) {\n      newNotes.pop();\n    }\n    newNotes.splice(0, 0, newItem);\n\n    this.setState({\n      notes: newNotes,\n    });\n\n    axios\n      .post(\"http://localhost:8888/addNote\", {\n        title: newItem.title,\n        content: newItem.content,\n      })\n      .then((response) => {\n        console.log(response);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"App container-fluid \">\n        <div className=\"row text-center mx-auto\">\n          <div className=\"col-3 left-container \">\n            <h1>Write down your </h1>\n            <br />\n            <h1>awesome ideas! </h1>\n            <br /> <br /> <br />\n            <NoteForm\n              submitHandler={this.submitHandler}\n              titleChangeHandler={this.handleTitleChange}\n              contentChangeHandler={this.handleContentChange}\n            />\n          </div>\n          <div className=\"col-7 right-container output h-100 mx-5\">\n            <NoteList notes={this.state.notes} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}